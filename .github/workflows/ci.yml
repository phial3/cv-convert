name: ci

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_LOG: info
  RUST_FLAGS: "-D warnings"
  RUST_BACKTRACE: "full"

jobs:

  build-linux:
    name: build / linux / ffmpeg+opencv+pytorch
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - feature: "full,test-tch"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            ca-certificates \
            clang \
            curl \
            pkg-config \
            software-properties-common \
            wget \
            cmake \
            python3 \
            python3-pip \
            python3-dev \
            ffmpeg \
            libavcodec-dev \
            libavdevice-dev \
            libavfilter-dev \
            libavformat-dev \
            libavutil-dev \
            libswresample-dev \
            libswscale-dev \
            libopencv-dev \
            python3-opencv

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --features ${{ matrix.feature }} --verbose

      - name: Run Test
        run: cargo test --features ${{ matrix.feature }} --verbose -- --nocapture

  build-macos:
    name: build / macos / ffmpeg+opencv+pytorch
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install ffmpeg opencv pytorch pkg-config

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --all-features --verbose

      - name: Run Test
        run: cargo test --verbose -- --nocapture

  build-windows:
    name: build / windows / latest ffmpeg
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - feature: "rsmpeg"

    env:
      FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "${env:FFMPEG_DOWNLOAD_URL}" -OutFile ffmpeg-release-full-shared.7z
          7z x ffmpeg-release-full-shared.7z
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_ENV "FFMPEG_INCLUDE_DIR=${pwd}\ffmpeg\include`n"
          Add-Content $env:GITHUB_ENV "FFMPEG_LIBS_DIR=${pwd}\ffmpeg\lib`n"
          Add-Content $env:GITHUB_ENV "FFMPEG_DLL_PATH=${pwd}\ffmpeg\bin`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        run: cargo build --features ${{ matrix.feature }} --verbose

      # TODO: Failed test on windows
      #- name: Run Test
      #  run: cargo test --features ${{ matrix.feature }} --verbose -- --nocapture

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --examples --tests --all-features --all -- -D warnings